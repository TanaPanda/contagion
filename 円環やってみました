# -*- coding: utf-8 -*-
 
from __future__ import division   
import matplotlib.pyplot as plt 
from random import choice, randint 
import numpy as np 

class Player:

   def __init__(self, type, q):
      self.type = type
      self.type_dist = np.array([1, 0]) if self.type == 0 else np.array([0,1])
      self.gain_matrix = np.array([[q, 0], [0, 1-q]])   
      
   def action_distribution(self, players):
      position = players.index(self)  #両隣と対戦する様にしました。
      if players[position] != players[-1]: 
         op_1, op_2 = players[position-1], players[position+1]
      else: 
         op_1, op_2 = players[-2], players[0]
      return np.dot(op_1.type_dist, self.gain_matrix) + np.dot(op_2.type_dist, self.gain_matrix)

   def play(self):

      act_dist = self.action_distribution(players)

      if act_dist[0] > act_dist[1]:
         action = 0
      elif act_dist[0] == act_dist[1]:
         action = choice([0, 1])
      else:
         action = 1

      return action

   def update_player(self):
      
      action = self.play()

      self.type = action

def count_action(players):
   
   actions = []
   
   for player in players:
      actions.append(player.type)

   return actions.count(1)

num_type_0 = 15
num_type_1 = 1
q = 1/3

players = [Player(0, q) for i in range(num_type_0)]
players_1 = [Player(1, q) for i in range(num_type_1)]
for player_1 in players_1:
   players.insert(randint(0, num_type_0), player_1)

transition = [1]

while 1:
   no_one_changed = True
   for player in players:
      old_type = player.type
      player.update_player()
      if player.type != old_type:
         no_one_changed = False
    
   transition.append(count_action(players))
   
   if no_one_changed:
      break


plt.plot(transition, label="action transition")
plt.legend()
plt.show()
