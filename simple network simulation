# -*- coding: utf-8 -*-

from __future__ import division   
import matplotlib.pyplot as plt 
import random 
import numpy as np 
import networkx as nx

class Player:
    
    def __init__(self, state, q):
        self.state = state
        self.q = q   

    def play(self, circle):
        if self.state == 0:
            position = sumple.players.index(self)
            p = sumple.action_distribution(N, links)[position]
            if p >= self.q:
                action = 1
            else:
                action = 0
        else:
            action = 1     #Once choice 1, keep 1 

        return action


class Local_Interaction:

    def __init__(self, N, positions_1):
        self.players = [Player(0, q) for i in range(N)]
        for i in positions_1:
            self.players[i] = Player(1, q)
        self.current_state()

    def current_state(self):
        self.state_1 = []
        for player in self.players:
            self.state_1.append(1 if player.state == 1 else 0)
        
        return self.state_1

    def action_distribution(self, N, links):

        adj_matrix = np.zeros((N, N))
        for i, link in enumerate(links):
            for nei in link:
                adj_matrix[i, nei] = 1

        current_state = self.current_state()
    
        num_ops_1 = np.dot(adj_matrix, current_state)

        all_p = []
        for i in range(N):
            num_op = sum(adj_matrix[i])
            num_op_1 = num_ops_1[i]
            all_p.append(num_op_1/num_op)
            
        return all_p

    def update(self):
        actions = []
        for player in self.players:
            actions.append(player.play(self))
        for i, player in enumerate(self.players):
            player.state = actions[i]


N = 17  
a = 3  #attraction of new technology
b = 2  #attraction of old technology   gain_matrix = [[b,0],[0,a]] 
q = b/(a+b)  #threshold
T = 20 
positions_1 = [6, 7]
links = [[1,2],[0,2,5],[0,1],[4,5,6],[3,6,7],[3,8],[3,4,7,8,9],
         [4,6,9,13],[5,6,9,10],[6,7,8,11],[8,11,14],[9,10,12,14,15],
         [11,13,15,16],[7,12,16],[10,11,15],[11,12,14,16],[12,13,15]]

sumple = Local_Interaction(N, positions_1) 
transition_1 = []

for i in range(T): 
    count_1 = sumple.state_1.count(1)
    transition_1.append(count_1)
    sumple.update()


plt.plot(transition_1, label="action transition_1")
plt.legend()
plt.show()


G = nx.Graph()
for i, link in enumerate(links):
    for nei in link:
        G.add_edge(i, nei, {"weight":10})

pos = nx.spring_layout(G)

nx.draw_networkx_nodes(G, pos, node_size=300, node_color="w")
nx.draw_networkx_edges(G, pos, width=1)
nx.draw_networkx_labels(G, pos ,font_size=13, font_color="r")

plt.xticks([])
plt.yticks([])
plt.show() 
nter file contents here
