# -*- coding: utf-8 -*-

from __future__ import division   
import matplotlib.pyplot as plt
from matplotlib import animation
import random 
import numpy as np 
import networkx as nx

class Player:
    
    def __init__(self, state, q):
        self.state = state
        self.q = q   

    def play(self, network):
        if self.state == 0:
            position = network.players.index(self)
            p = network.action_distribution(N)[position]
            if p >= self.q:
                action = 1
            else:
                action = 0
        else:
            action = 1#Once choice 1, keep 1 

        return action


class Local_Interaction:

    def __init__(self, N):
        self.adopter = Adopter(G)
        self.players = [Player(0, q) for i in range(N)]
        f_adopter = self.first_adopter(N)
        self.players[f_adopter] = Player(1, q)
        self.first_adopters = [f_adopter]
        print self.first_adopters
        self.current_state()
        

#一番最初の採用者を選ぶ。        

    def first_adopter(self, N):
        return self.adopter.choice_adopter(range(N))#一番最初の採用候補者は全プレイヤー。
    
    def df_adopters(self):#一人の初期採用者だけではカスケードが起きない場合、起きるまで初期採用者を選ぶ。
        while 1:
            someone_changed = True
            old_state = self.current_state()
            self.update()
            if old_state == self.current_state():
                next_candidacies = self.adopter.next_candidacy(self.first_adopters)
                next_adopter = self.adopter.choice_adopter(next_candidacies)
                self.players[next_adopter] = Player(1, q)
                self.first_adopters.append(next_adopter)
                someone_changed = False
            if someone_changed:
                break
 
    def current_state(self):
        self.state_1 = []
        for player in self.players:
            self.state_1.append(1 if player.state == 1 else 0)
        
        return self.state_1

    def action_distribution(self, N):

        adj_matrix = self.adopter.adj_matrix
    
        current_state = self.current_state()
    
        num_neis_1 = np.dot(adj_matrix, current_state)

        all_p = []
        for i in range(N):
            num_nei = sum(adj_matrix[i])
            num_nei_1 = num_neis_1[i]
            all_p.append(num_nei_1/num_nei)
            
        return all_p

    def update(self):
        actions = []
        for player in self.players:
            actions.append(player.play(self))
        for i, player in enumerate(self.players):
            player.state = actions[i]
            
            
class Adopter:
    
    def __init__(self, G):
        self.adj_matrix = np.asarray(nx.adjacency_matrix(G))
    
#採用者候補の中から、一人の採用者を選ぶ。
#方針は、自分が持つリンク数が一番多いものを選ぶ。
        
    def choice_adopter(self, candidacy):
        num_edges = []
        for i in candidacy:
            num_edges.append(sum(self.adj_matrix[i]))
        candidacies = self.search_max(candidacy, num_edges)
        return random.choice(candidacies)#リンク数が等しい場合はランダムに選ぶ。
        
    def search_max(self, subjects, num_list):
        max_sub = []
        max_num = max(num_list)
        for i, num in enumerate(num_list):
            if num == max_num:
                max_sub.append(subjects[i])
        return max_sub
        
            
#今の初期採用者ではカスケードが起きない場合、次の候補者を探す。
#方針は、初期採用者のリンク先のプレイヤーから、最も多くリンクされているプレイヤーを探す。
#初期採用者とそのリンク先のリスト（ｆ_link_dests）①
#⇒初期採用者とそのリンク先、のリンク先のリスト（next_cands_uniq）②
#⇒②の①からのリンク数（num_edges_from_link_dest）

    def link_dest(self, beginings):
        link_dests = []#初期採用者のリンク先（+初期採用者)
        for begining in beginings:#初期採用者のリンク先を全て挙げる。
            link_dest = []
            for i, state in enumerate(self.adj_matrix[begining]):
                if state == 1:
                    link_dest.append(i)
            link_dests.extend(link_dest)
        return link_dests
            
    def mk_uniq(self, somelist, first_adopters):#初期採用者・重複を消す。
        somelist_uniq = list(set(somelist))
        
        for adopter in first_adopters:
            if adopter in somelist_uniq:
                somelist_uniq.remove(adopter)
        return somelist_uniq

    def next_candidacy(self, first_adopters):
        link_dests = self.link_dest(first_adopters)
        f_link_dests = self.mk_uniq(link_dests, first_adopters)
        f_link_dests.extend(first_adopters)#初期採用者とそのリンク先
        
        next_cands = self.link_dest(f_link_dests)
        next_cands_uniq = self.mk_uniq(next_cands, first_adopters)#初期採用者とそのリンク先、のリンク先（次の採用候補者）
    
        
        num_edges_from_link_dest = []#各採用候補者の、初期採用者とそのリンク先、からのリンク数。
        for next_cand in next_cands_uniq:#初期採用者とそのリンク先、から最も多くリンクされている候補者に絞り込む。
            num_edges_from_link_dest.append(next_cands.count(next_cand))#next_cands=重複を消す前の初期採用者のリンク先。
        
        n_candidacy = self.search_max(next_cands_uniq, num_edges_from_link_dest)#next_cands_uniqの中で上述のリンク数が最大のもの。
        
        return n_candidacy
    
def draw_network(G, pos, adopters=[]):
    
    nx.draw_networkx(G, pos, node_color="w")
        
    nx.draw_networkx_nodes(G, pos, adopters, node_color="r")

    plt.xticks([])
    plt.yticks([])
    plt.show() 
    
def go_cascade():
    while 1:
        no_one_changed = True
        old_state = sumple.current_state()
        num_adopters = old_state.count(1)
        print num_adopters
        adopters = []
        for i, state in enumerate(old_state):
            if state == 1:
                adopters.append(i)
        draw_network(G, pos, adopters)
        sumple.update()
        if old_state != sumple.current_state():        
            no_one_changed = False
        if no_one_changed:
            print adopters 
            break
    return adopters
            
def next_cascade(N, adopters):
    next_adopters = range(N)
    for i in adopters:
        next_adopters.remove(i)

    n_adopter = sumple.adopter.choice_adopter(next_adopters)
    sumple.players[n_adopter] = Player(1, q)
    sumple.first_adopters = [n_adopter]

    sumple.df_adopters()
    print sumple.first_adopters
        
    adopters.extend(sumple.first_adopters)
    num_adopters = len(adopters)
    print num_adopters

    draw_network(G, pos, adopters)
        
    return go_cascade()
    

N = 100
E = 70
a = 3  #attraction of new technology
b = 2  #attraction of old technology   gain_matrix = [[b,0],[0,a]] 
q = b/(a+b)  #threshold

G = nx.newman_watts_strogatz_graph(N, 5, 0.4, seed=None)
sumple = Local_Interaction(N)
pos = nx.spring_layout(G)
        
#実働部
print('Cascade 1') 
sumple.df_adopters()
print sumple.first_adopters
num_adopters = len(sumple.first_adopters)
print num_adopters
draw_network(G, pos, sumple.first_adopters)
adopters = go_cascade()

count = 2
while 1:
    all_players_adopt = True
    if sum(sumple.current_state()) != N:
        print'Cascade', count
        adopters = next_cascade(N, adopters)
        count += 1
        all_players_adopt = False
    if all_players_adopt:
        break

print count
print('Cascade completed.')
                
